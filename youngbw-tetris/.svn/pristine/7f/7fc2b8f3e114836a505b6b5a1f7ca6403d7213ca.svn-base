/*
 * TCSS 305C - Autumn 2013
 * Tetris A - youngbw-TetrisA
 */
package view;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;

/**
 * This class represents a menu bar containing a file, help, and
 * checkbox option menu.
 * @author BrentYoung
 * @version 1.0
 */
@SuppressWarnings("serial")
public class MyMenuBar extends JMenuBar implements PropertyChangeListener {    

    /**
     * File name to draw text from for the help pane.
     */
    private static final String HELP_FILENAME = "./resources/about.txt";
    
    /**
     * The help panel, separate due to needing to show and exit arbitrarily.
     */
    private MyHelpPanel myAboutPanel;
    
    /**
     * Pause menu item, used to pause and un-pause the game as the user chooses
     * and when the help menu it visible.
     */
    private JCheckBoxMenuItem myPauseItem;
    
    /**
     * Menu item to start a new game, reference for enabling/disabling.
     */
    private JMenuItem myNewGameItem;
    
    /**
     * Menu item to end the game, reference for setting enabled/disabled.
     * @see #myPauseItem
     */
    private JMenuItem myEndGameItem;
    
    /**
     * Constructor for this menu bar, initializes and adds all components
     * to the menu bar.
     * @param theFrame reference to the main frame
     * @param theBoardPanel reference to the panel containing the board
     * @param theSidePanel reference to the side panel for stats
     */
    public MyMenuBar(final JFrame theFrame, final MyBoardPanel theBoardPanel,
                     final JPanel theSidePanel) {
        myAboutPanel = new MyHelpPanel(HELP_FILENAME);
        myPauseItem = new JCheckBoxMenuItem("Pause");
        myNewGameItem = new JMenuItem("New Game");
        myEndGameItem = new JMenuItem("End Game");
        initialize(theFrame, theBoardPanel, theSidePanel);
    }
    
    /**
     * Initializes all default states of instantiated objects.
     * @param theFrame frame reference used for file menu setup
     * @param theBoardPanel board panel reference used for file menu setup
     * @param theSidePanel side panel reference used for view option setup
     * @see #MyMenuBar(JFrame, MyBoardPanel, JPanel)
     */
    private void initialize(final JFrame theFrame, final MyBoardPanel theBoardPanel,
                            final JPanel theSidePanel) {
        final JMenu fileMenu = setupFileMenu(theFrame, theBoardPanel);
        final JCheckBoxMenuItem viewOption = setupViewOption(theFrame, theSidePanel);
        myNewGameItem.setEnabled(false);
        viewOption.doClick();
        add(fileMenu);
        add(setupHelpMenu(theBoardPanel));
        add(viewOption);
    }

    /**
     * Creates and returns the file menu with all action listeners necessary.
     * @param theFrame frame reference for the GUI
     * @param theBoardPanel reference to the panel containing the board
     * @return JMenu menu representing the file menu
     * @see #setupViewOption(JFrame, JPanel)
     */
    private JMenu setupFileMenu(final JFrame theFrame,
                                      final MyBoardPanel theBoardPanel) {
        final JMenu menu = new JMenu("File");
        menu.setMnemonic(KeyEvent.VK_F);

        myNewGameItem.setMnemonic(KeyEvent.VK_N);
        myNewGameItem.addActionListener(new ActionListener() {
        
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                if (myPauseItem.isSelected()) {
                    myPauseItem.setSelected(false);
                    theBoardPanel.continueGame();
                }
                theBoardPanel.startGame();
            }
        });
        
        myPauseItem.setMnemonic(KeyEvent.VK_P);
        myPauseItem.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                if (myPauseItem.isSelected()) {
                    theBoardPanel.pauseGame();
                } else {
                    theBoardPanel.continueGame();
                }
            }
        });
        
        myEndGameItem.setMnemonic(KeyEvent.VK_E);
        myEndGameItem.addActionListener(new ActionListener() {
        
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                theBoardPanel.endGame();            
            }
        });
        
        final JMenuItem quitMenuItem = new JMenuItem("Quit");
        quitMenuItem.setMnemonic(KeyEvent.VK_Q);
        quitMenuItem.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                theBoardPanel.quitGame();
                theFrame.dispose();
                System.exit(0);
            }
        });
        menu.add(myNewGameItem);
        menu.add(myPauseItem);
        menu.add(myEndGameItem);
        menu.addSeparator();
        menu.add(quitMenuItem);
        return menu;
    }

    /**
     * Creates and returns the help menu with all options and action listeners.
     * Pauses the game.
     * @param theBoardPanel panel reference for pausing game when help menu is up
     * @return JMenu menu representing the help menu option
     * @see #setupFileMenu(JFrame, MyBoardPanel)
     */
    private JMenu setupHelpMenu(final MyBoardPanel theBoardPanel) {
        final JMenu help = new JMenu("Help");
        help.setMnemonic(KeyEvent.VK_H);
        
        final JMenuItem aboutItem = new JMenuItem("About");
        aboutItem.setMnemonic(KeyEvent.VK_A);
        aboutItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myAboutPanel.setVis();
                myPauseItem.setSelected(true);
                theBoardPanel.pauseGame(); 
            }
        });

        help.add(aboutItem);
        return help;

    }

    /**
     * Creates and returns a check box menu item to hide the side panel.
     * @param theFrame frame reference to the GUI
     * @param thePanel board panel reference
     * @return JCheckBoxMenuItem check box to show/hide the side panel
     * @see #setupHelpMenu()
     */
    private JCheckBoxMenuItem setupViewOption(final JFrame theFrame, final JPanel thePanel) {
        final JCheckBoxMenuItem view = new JCheckBoxMenuItem("View side panel");
        view.setMnemonic(KeyEvent.VK_V);

        view.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                if (view.isSelected()) {
                    theFrame.add(thePanel, BorderLayout.EAST);
                } else {
                    theFrame.remove(thePanel);
                }
                theFrame.pack();
            }
        });
        return view;
    }

    @Override
    public void propertyChange(final PropertyChangeEvent theEvent) {
        if ("EndGame".equals(theEvent.getPropertyName())) {
            myNewGameItem.setEnabled(true);
            myEndGameItem.setEnabled(false);
            myPauseItem.setEnabled(false);
        } else if ("NewGame".equals(theEvent.getPropertyName())) {
            myNewGameItem.setEnabled(false);
            myEndGameItem.setEnabled(true);
            myPauseItem.setEnabled(true);
        }
    }
}
